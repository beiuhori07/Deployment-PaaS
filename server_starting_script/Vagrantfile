Vagrant.configure("2") do |config|
  
    config.vm.define "server_test" do |vm|
      vm.vm.box = "ubuntu/focal64"
    end
  
    config.vm.boot_timeout = 2400
    config.vm.network "public_network", promisc: "allow"
  
    config.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = "16384"
      vb.cpus = 10
      vb.customize ["modifyvm", :id, "--audio", "none"]
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    end

    # todo: the network adapter might need to be changed depending on network settings
    config.vm.provision "shell", inline: <<-SHELL
      
      sudo apt update


      curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
      sudo apt install -y nodejs
      node -v
      npm -v


      wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt update && sudo apt install -y vagrant
      vagrant --version


      sudo apt install -y virtualbox
      VBoxManage --version

      DD_API_KEY=#{datadog_api_key} DD_SITE="datadoghq.eu"  bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"
      datadog-agent version


      sudo apt-get update
      sudo apt-get install ca-certificates curl
      sudo install -m 0755 -d /etc/apt/keyrings
      sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      sudo chmod a+r /etc/apt/keyrings/docker.asc
      echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update  
      sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      docker --version


      sudo groupadd docker
      sudo usermod -aG docker $USER
      sudo usermod -aG sudo $USER
      newgrp docker

      wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt update && sudo apt install -y consul
      consul --version


      sudo apt install -y git unzip
      git --version


      sudo mkdir -p /etc/consul.d
      sudo mkdir -p /var/lib/consul
      echo -e "data_dir = \\"/var/lib/consul\\"" >> /etc/consul.d/consul.hcl
      echo -e "client_addr = \\"0.0.0.0\\"" >> /etc/consul.d/consul.hcl
      echo -ne "bind_addr =" >> /etc/consul.d/consul.hcl
      echo -ne \\" >> /etc/consul.d/consul.hcl
      echo -ne {{ GetInterfaceIP >> /etc/consul.d/consul.hcl
      echo -n ' \\' >> /etc/consul.d/consul.hcl
      echo -ne \\" >> /etc/consul.d/consul.hcl
      echo -ne enp0s8 >> /etc/consul.d/consul.hcl
      echo -n '\\' >> /etc/consul.d/consul.hcl
      echo -ne \\" >> /etc/consul.d/consul.hcl
      echo -n ' ' >> /etc/consul.d/consul.hcl
      echo -e }}\\" >> /etc/consul.d/consul.hcl
      echo -e "server=false" >> /etc/consul.d/consul.hcl
      echo -e "enable_local_script_checks=true" >> /etc/consul.d/consul.hcl
      echo -e "retry_join=[\\"192.168.0.165\\"]" >> /etc/consul.d/consul.hcl

      echo -e "
        [Unit]
        Description=Consul Agent
        Requires=network-online.target
        After=network-online.target

        [Service]
        Type=simple
        User=root
        Group=root
        ExecStart=sudo consul agent -config-dir=/etc/consul.d/
        ExecReload=/bin/kill -HUP $MAINPID
        Restart=on-failure
        LimitNOFILE=65536

        [Install]
        WantedBy=multi-user.target
      " > /etc/systemd/system/consul.service
      


    echo -e "{
    \\"service\\": {
        \\"name\\": \\"vm-service\\",
        \\"tags\\": [
            \\"vm\\"
        ],
        \\"port\\": 22,
        \\"checks\\": [
            {
                \\"id\\": \\"vm-service-check\\",
                \\"name\\": \\"VM service health check\\",
                \\"args\\": [\\"/etc/consul.d/checkDatadogAgent.sh\\"],
                \\"interval\\": \\"30s\\",
                \\"timeout\\": \\"5s\\"
            },
            {
                \\"id\\": \\"http-check\\",
                \\"name\\": \\"HTTP Check on deploy service\\",
                \\"http\\": \\"http://localhost:3001/health\\",
                \\"interval\\": \\"10s\\",
                \\"timeout\\": \\"5s\\",
                \\"method\\": \\"GET\\"
            }
        ],
        \\"meta\\": {
            \\"geolocation\\": \\"romania\\"
        }
    }
}" > /etc/consul.d/vm.json

         echo -e "#!/bin/bash
if systemctl is-active --quiet datadog-agent; then
    echo "\\"datadog agent is running\\""
    exit 0
else
    echo "\\"datadog agent is not running\\""
    exit 2
fi" > /etc/consul.d/checkDatadogAgent.sh

      
      sudo chmod +x /etc/consul.d/checkDatadogAgent.sh



      echo -e "\nlogs_enabled: true
listeners:
    - name: docker
config_providers:
    - name: docker
      polling: true
logs_config:
    container_collect_all: true" >> /etc/datadog-agent/datadog.yaml


      usermod -a -G docker dd-agent

      echo -e "init_config:

instances:
    - url: \\"unix://var/run/docker.sock\\"" >> /etc/datadog-agent/conf.d/docker.d/docker_daemon.yaml

      sudo systemctl restart datadog-agent


      sudo mkdir -p /home/vagrant/licenta/vagrant
      sudo mkdir -p /home/vagrant/licenta/deploy_service
      sudo chown vagrant /home/vagrant/licenta/vagrant
      sudo chown vagrant /home/vagrant/licenta/deploy_service

      cp /vagrant/Vagrantfile_template_cpu /home/vagrant/licenta/vagrant/Vagrantfile_template_cpu
      cp /vagrant/Vagrantfile_template_memory /home/vagrant/licenta/vagrant/Vagrantfile_template_memory

      git clone https://github.com/beiuhori07/deploy_service.git /home/vagrant/licenta/deploy_service
      cd /home/vagrant/licenta/deploy_service
      touch .env
      echo -e 'GITHUB_PRIVATE_KEY=\\"#{github_private_key}\\"' > .env
      npm install


      sudo systemctl daemon-reload
      sudo systemctl enable consul
      sudo systemctl start consul

      
      nohup npm start > nohup_logs.log 2>&1 &
    SHELL
  
  
  
  end
  